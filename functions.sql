CREATE OR REPLACE FUNCTION GET_BLOB_FROM_STRING (PIC IN NVARCHAR2) 
RETURN BLOB
IS 
   F_LOB BFILE; 
   B_LOB BLOB; 
BEGIN
   F_LOB := BFILENAME('BOOKSTORE_IMAGES_DIR', PIC); 
    
   DBMS_LOB.CREATETEMPORARY(B_LOB, TRUE);
   DBMS_LOB.FILEOPEN(F_LOB, DBMS_LOB.FILE_READONLY); 
   DBMS_LOB.LOADFROMFILE(B_LOB, F_LOB, DBMS_LOB.GETLENGTH(F_LOB)); 
   DBMS_LOB.FILECLOSE(F_LOB); 

  RETURN B_LOB;
  EXCEPTION
      WHEN OTHERS THEN
        RETURN EMPTY_BLOB();
END;

SELECT * FROM AUTHORS;

CREATE OR REPLACE FUNCTION GET_ALL_BOOKS_FOR_ORDER (
  P_ORDER_ID INT
) RETURN NVARCHAR2
IS RESULT_STRING NVARCHAR2(1000);
   BOOK_NAME NVARCHAR2(100);
   CURSOR BOOK_CURSOR IS
   SELECT B.NAME 
   FROM BOOKS B
   JOIN ORDERSBOOKS OB ON B.ID = OB.BOOK_ID
   WHERE OB.ORDER_ID = P_ORDER_ID;
  BEGIN
    OPEN BOOK_CURSOR;
    LOOP 
      FETCH BOOK_CURSOR INTO BOOK_NAME;
      EXIT WHEN BOOK_CURSOR%NOTFOUND;
      IF RESULT_STRING IS NOT NULL THEN
       RESULT_STRING := RESULT_STRING || ', ' || BOOK_NAME;
      ELSE 
        RESULT_STRING := BOOK_NAME;
      END IF;
    END LOOP;
    CLOSE BOOK_CURSOR;
    RETURN RESULT_STRING;
  END;
  
CREATE OR REPLACE FUNCTION GET_ALL_AUTHORS_FOR_BOOK (
  P_BOOK_ID INT
) RETURN NVARCHAR2
IS RESULT_STRING NVARCHAR2(1000);
   AUTHOR_NAME NVARCHAR2(100);
   CURSOR AUTHOR_CURSOR IS
   SELECT A.NAME || ' ' || A.SURNAME 
   FROM AUTHORS A 
   JOIN AUTHORSBOOKS AB ON A.ID = AB.AUTHOR_ID
   WHERE AB.BOOK_ID = P_BOOK_ID;
  BEGIN
    OPEN AUTHOR_CURSOR;
    LOOP 
      FETCH AUTHOR_CURSOR INTO AUTHOR_NAME;
      EXIT WHEN AUTHOR_CURSOR%NOTFOUND;
      IF RESULT_STRING IS NOT NULL THEN
       RESULT_STRING := RESULT_STRING || ', ' || AUTHOR_NAME;
      ELSE 
        RESULT_STRING := AUTHOR_NAME;
      END IF;
    END LOOP;
    CLOSE AUTHOR_CURSOR;
    RETURN RESULT_STRING;
  END;
  
CREATE OR REPLACE FUNCTION CHECK_IF_AUTHOR_EXISTS(
  p_name NVARCHAR2,
  p_surname NVARCHAR2,
  p_birth_date DATE
) RETURN INT AS
  v_author_id INT;
BEGIN
  SELECT ID INTO v_author_id
  FROM AUTHORS
  WHERE NAME = p_name AND SURNAME = p_surname AND BIRTH_DATE = p_birth_date;

  RETURN v_author_id;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN -1;
END CHECK_IF_AUTHOR_EXISTS;

CREATE OR REPLACE FUNCTION CHECK_IF_BOOK_EXISTS(
  P_NAME NVARCHAR2,
  P_PUBLISHER nvarchar2
) RETURN INT AS
  V_BOOK_TEMP_ID INT;
  v_book_id INT;
BEGIN
  SELECT ID INTO V_BOOK_TEMP_ID
  FROM BOOKS
  WHERE NAME = P_NAME AND PUBLISHER = P_PUBLISHER;
    RETURN V_BOOK_TEMP_ID;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN -1;
END CHECK_IF_BOOK_EXISTS;

CREATE OR REPLACE FUNCTION CHECK_IF_AUTHOR_AVAILABLE(
  AUTHOR_ID INT
) RETURN INT AS
  v_author_availability INT;
BEGIN
  SELECT AVAILABILITY INTO v_author_availability
  FROM AUTHORS
  WHERE ID = AUTHOR_ID;

  RETURN v_author_availability;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN -1;
END CHECK_IF_AUTHOR_AVAILABLE;

CREATE OR REPLACE FUNCTION CHECK_IF_BOOK_AVAILABLE(
  BOOK_ID INT
) RETURN INT AS
  v_book_availability INT;
BEGIN
  SELECT AVAILABILITY INTO V_BOOK_AVAILABILITY
  FROM BOOKS
  WHERE ID = BOOK_ID;

  RETURN v_book_availability;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN -1;
END CHECK_IF_BOOK_AVAILABLE;

CREATE OR REPLACE FUNCTION IS_USER_A_MANAGER
  RETURN NUMBER
  AUTHID DEFINER
AS 
  CURRENT_USERNAME NVARCHAR2(100);
  IS_USER_A_MANAGER NUMBER;
BEGIN
  CURRENT_USERNAME := USER;
  
  SELECT COUNT(*)
  INTO IS_USER_A_MANAGER
  FROM DBA_ROLE_PRIVS
  WHERE GRANTEE = CURRENT_USERNAME
    AND GRANTED_ROLE = 'MANAGER_ROLE';
    
  RETURN IS_USER_A_MANAGER;
END;

CREATE OR REPLACE FUNCTION WRITE_ORDERS_STATS_FROM_XML
RETURN CLOB
AS
   xml_file BFILE;
   XML_CLOB CLOB;
BEGIN
  xml_file := BFILENAME('XML_DIR', 'orders.xml');
  DBMS_LOB.fileopen(xml_file, DBMS_LOB.file_readonly);
  DBMS_LOB.createtemporary(XML_CLOB, TRUE);
  DBMS_LOB.LOADFROMFILE(XML_CLOB, xml_file, DBMS_LOB.lobmaxsize);
  DBMS_LOB.fileclose(xml_file);
  
  RETURN XML_CLOB;
END;
  
  
CREATE DIRECTORY BOOKSTORE_IMAGES_DIR AS 'C:\Images for book store';
GRANT READ, WRITE ON DIRECTORY BOOKSTORE_IMAGES_DIR TO MANAGER_ROLE;


