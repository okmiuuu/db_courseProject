CREATE OR REPLACE TRIGGER TRG_UPDATE_AVERAGE_GRADE
FOR INSERT OR UPDATE OR DELETE ON REVIEWS
COMPOUND TRIGGER

  TYPE ID_LIST IS TABLE OF REVIEWS.ID%TYPE;
  REVIEW_IDS ID_LIST := ID_LIST();

  PROCEDURE CALCULATE_AVERAGE_GRADE IS
    TOTAL_GRADE NUMBER := 0;
    AVERAGE_GRADE NUMBER;
    REVIEW_COUNT NUMBER;
  BEGIN
    FOR I IN 1..REVIEW_IDS.COUNT LOOP
      SELECT SUM(GRADE), COUNT(*) INTO TOTAL_GRADE, REVIEW_COUNT
      FROM REVIEWS
      WHERE BOOK = :OLD.BOOK OR BOOK = :NEW.BOOK;

      IF REVIEW_COUNT > 0 THEN
        AVERAGE_GRADE := TOTAL_GRADE / REVIEW_COUNT;
      ELSE
        AVERAGE_GRADE := 0;
      END IF;
      
      UPDATE BOOKS B SET B.GRADE = AVERAGE_GRADE WHERE B.ID = :OLD.BOOK OR B.ID = :NEW.BOOK;  
    END LOOP;
  END CALCULATE_AVERAGE_GRADE;

AFTER EACH ROW IS
BEGIN
  REVIEW_IDS.EXTEND;
  REVIEW_IDS(REVIEW_IDS.COUNT) := :NEW.ID;
END AFTER EACH ROW;

AFTER STATEMENT IS
BEGIN
  DBMS_OUTPUT.PUT_LINE('here');
  CALCULATE_AVERAGE_GRADE;

  REVIEW_IDS.DELETE;
END AFTER STATEMENT;

END TRG_UPDATE_AVERAGE_GRADE;


CREATE OR REPLACE TRIGGER TRG_UPDATE_ORDER_COST
AFTER INSERT OR DELETE ON ORDERSBOOKS
FOR EACH ROW
DECLARE 
  BOOK_COST NUMBER(5,2);
BEGIN
  SELECT COST INTO BOOK_COST FROM BOOKS WHERE ID = :NEW.BOOK_ID OR ID = :OLD.BOOK_ID;
  IF DELETING THEN BOOK_COST := BOOK_COST * (-1); END IF;
  UPDATE ORDERS SET COST = COST + BOOK_COST WHERE ID = :NEW.ORDER_ID OR ID = :OLD.ORDER_ID;
END;

CREATE OR REPLACE TRIGGER TRG_UPDATE_QUANTITY_ON_STOCK
AFTER INSERT OR DELETE ON ORDERSBOOKS
FOR EACH ROW
BEGIN
  IF DELETING THEN
    UPDATE BOOKS SET QUANTITY_ON_STOCK = QUANTITY_ON_STOCK + 1 WHERE ID = :OLD.BOOK_ID;
  ELSE
    UPDATE BOOKS SET QUANTITY_ON_STOCK = QUANTITY_ON_STOCK - 1 WHERE ID = :NEW.BOOK_ID;
  END IF;
END;

CREATE OR REPLACE TRIGGER TRG_UPDATE_BASKET
AFTER INSERT ON ORDERSBOOKS
FOR EACH ROW
DECLARE
  IS_BOOK_IN_BASKET INT;
  CLIENT_USERNAME NVARCHAR2(20);
BEGIN
  SELECT CLIENT INTO CLIENT_USERNAME FROM ORDERS
  WHERE ID = :NEW.ORDER_ID;
  SELECT COUNT(*) INTO IS_BOOK_IN_BASKET FROM BOOKS_IN_BASKET 
  WHERE BOOK_ID = :NEW.BOOK_ID;
  DELETE BOOKS_IN_BASKET 
  WHERE BOOK_ID = :NEW.BOOK_ID;
END;















