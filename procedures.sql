CREATE OR REPLACE PROCEDURE ADD_MANAGER (
  P_USERNAME IN NVARCHAR2,
  P_NAME IN NVARCHAR2,
  P_SURNAME IN NVARCHAR2,
  P_BIRTH_DATE IN NVARCHAR2,
  P_SALARY IN NUMBER
) 
AS BIRTH_DATE_IN_DATE DATE;
  MANAGER_EXISTS INT;
  BEGIN
    BEGIN
      BIRTH_DATE_IN_DATE := TO_DATE(P_BIRTH_DATE, 'MM/DD/YYYY');
    EXCEPTION
      WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Given date is in wrong format. The format needs to be MM/DD/YYYY');
    END;
    
    SELECT COUNT(*) INTO MANAGER_EXISTS 
    FROM MANAGERS WHERE USERNAME = P_USERNAME;
    IF MANAGER_EXISTS > 0 THEN
      UPDATE MANAGERS SET WORKING_NOW = 1 WHERE USERNAME = P_USERNAME;
    ELSE 
      INSERT INTO MANAGERS 
      VALUES (
              P_USERNAME,
              P_NAME,
              P_SURNAME,
              BIRTH_DATE_IN_DATE,
              P_SALARY,
              1
      );
    END IF;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE ADD_CLIENT (
  P_USERNAME IN NVARCHAR2,
  P_NAME IN NVARCHAR2,
  P_SURNAME IN NVARCHAR2,
  P_EMAIL IN NVARCHAR2,
  P_ADDRESS IN NVARCHAR2
)
AS
  USER_EXISTS INT;
BEGIN
  SELECT COUNT(*) INTO USER_EXISTS FROM CLIENTS C WHERE C.USERNAME = P_USERNAME;
  IF USER_EXISTS > 0 THEN
    DBMS_OUTPUT.PUT_LINE('Username ' || P_USERNAME || ' already taken. Please try another one.');
  ELSE
    begin ADD_USER(P_USERNAME, '12345'); end;
    INSERT INTO CLIENTS 
    VALUES (
      P_USERNAME,
      '12345',
      P_NAME,
      P_SURNAME,
      P_EMAIL,
      P_ADDRESS,
      0
    );
    COMMIT;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE ADD_USER (
  P_USERNAME IN VARCHAR2,
  P_PASSWORD IN VARCHAR2
) AUTHID CURRENT_USER
AS
BEGIN
  EXECUTE IMMEDIATE 'CREATE USER C##' || P_USERNAME || ' IDENTIFIED BY ' || P_PASSWORD;

  EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##' || P_USERNAME;

  EXECUTE IMMEDIATE 'GRANT CLIENT_ROLE TO C##' || P_USERNAME;

  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
END;



CREATE OR REPLACE PROCEDURE ADD_AUTHOR (
  NAME IN NVARCHAR2,
  SURNAME NVARCHAR2,
  PICTURE IN NVARCHAR2,
  BIRTH_DATE IN NVARCHAR2,
  BIOGRAPHY IN NVARCHAR2
)
IS BLOB_CONTENT BLOB;
   BIRTH_DATE_IN_DATE DATE;
   EXISTING_AUTHOR_ID INT; 
  BEGIN 
    BEGIN
      BIRTH_DATE_IN_DATE := TO_DATE(BIRTH_DATE, 'MM/DD/YYYY');
    EXCEPTION
      WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Given date is in wrong format. The format needs to be MM/DD/YYYY');
    END;
    BLOB_CONTENT := GET_BLOB_FROM_STRING(PICTURE);
    EXISTING_AUTHOR_ID := CHECK_IF_AUTHOR_EXISTS(NAME, SURNAME, BIRTH_DATE_IN_DATE);
    IF EXISTING_AUTHOR_ID != -1 THEN
      IF CHECK_IF_AUTHOR_AVAILABLE(EXISTING_AUTHOR_ID) = 1 THEN
        DBMS_OUTPUT.PUT_LINE('Author already exists in system.');
      ELSE 
        UPDATE AUTHORS A SET A.AVAILABILITY = 1 WHERE A.ID = EXISTING_AUTHOR_ID;
      END IF;
    ELSIF DBMS_LOB.GETLENGTH(BLOB_CONTENT) = 0 THEN
      DBMS_OUTPUT.PUT_LINE('The content of picture is empty. Please check filename.');
    ELSE
      INSERT INTO AUTHORS VALUES (
        AUTHORS_INDEX_SEQ.NEXTVAL,
        NAME,
        SURNAME,
        GET_BLOB_FROM_STRING(PICTURE),
        BIRTH_DATE_IN_DATE,
        BIOGRAPHY,
        1);
        COMMIT;
    END IF; 
  END;
  
  
CREATE OR REPLACE PROCEDURE ADD_PUBLISHER (
  NAME IN NVARCHAR2,
  DESCRIPTION IN NVARCHAR2,
  MANAGER IN NVARCHAR2
)
AS MANAGER_EXISTS INT; 
  BEGIN
    SELECT COUNT(*) INTO MANAGER_EXISTS FROM MANAGERS WHERE MANAGERS.USERNAME = MANAGER;
    IF MANAGER_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Manager username does not exist.');
    ELSE
      INSERT INTO PUBLISHERS VALUES (
        NAME,
        DESCRIPTION,
        MANAGER, 
        1
      );
      COMMIT;
    END IF;
  END;

CREATE OR REPLACE PROCEDURE ADD_BOOK (
  NAME IN NVARCHAR2, 
  PICTURE IN NVARCHAR2,
  DESCRIPTION IN NVARCHAR2,
  QUANTITY_ON_STOCK IN NUMBER,
  COST IN NUMBER,
  GENRE IN NVARCHAR2,
  PUBLISHER IN NVARCHAR2
)
AS PUBLISHER_EXISTS INT;
   
   EXISTING_BOOK_ID INT; 
  BEGIN 
   SELECT COUNT(*) INTO PUBLISHER_EXISTS FROM PUBLISHERS WHERE PUBLISHERS.NAME = PUBLISHER;
   EXISTING_BOOK_ID := CHECK_IF_BOOK_EXISTS(NAME, PUBLISHER);
   IF COST <= 0 THEN
      DBMS_OUTPUT.PUT_LINE('Cost cannot be equal or less than 0.');
   ELSIF QUANTITY_ON_STOCK < 0 THEN
      DBMS_OUTPUT.PUT_LINE('Quantity cannot be less than 0.');
   ELSIF PUBLISHER_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Publisher ID does not exist.');
   ELSIF EXISTING_BOOK_ID != - 1 THEN 
      IF CHECK_IF_BOOK_AVAILABLE(EXISTING_BOOK_ID) = 1 THEN
        DBMS_OUTPUT.PUT_LINE('Book already exists in system.');
      ELSE
        UPDATE BOOKS A SET A.AVAILABILITY = 1 WHERE A.ID = EXISTING_BOOK_ID;
      END IF;
   ELSE
      INSERT INTO BOOKS VALUES (
        BOOKS_INDEX_SEQ.NEXTVAL,
        NAME,
        GET_BLOB_FROM_STRING(PICTURE),
        DESCRIPTION,
        QUANTITY_ON_STOCK,
        COST,
        GENRE,
        0,
        PUBLISHER,
        1);
        COMMIT;
    END IF;
    EXCEPTION 
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
  END;
  
create or replace procedure ADD_REVIEW (
  P_USERNAME IN NVARCHAR2,
  P_GRADE IN NUMBER,
  P_BOOK IN INT,
  P_TEXT IN NVARCHAR2
)
AS CLIENT_EXISTS INT;
   BOOK_EXISTS int;
   CURRENT_USERNAME NVARCHAR2(20);
  begin
    CURRENT_USERNAME := USER;
    SELECT COUNT(*) INTO CLIENT_EXISTS FROM CLIENTS WHERE USERNAME = P_USERNAME;
    SELECT COUNT(*) INTO BOOK_EXISTS FROM BOOKS WHERE ID = P_BOOK;
    
    IF P_GRADE > 5 THEN
      DBMS_OUTPUT.PUT_LINE('Grade cannot be more than 5.');
    ELSIF CLIENT_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Username doesn''t exist in system.');
    ELSIF BOOK_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Book doesn''t exist in system.');
    ELSIF UPPER(P_USERNAME) != SUBSTR(CURRENT_USERNAME, 4) then
      DBMS_OUTPUT.PUT_LINE('Cant add review for other user.');
    ELSE
      INSERT INTO REVIEWS VALUES (
        REVIEWS_INDEX_SEQ.NEXTVAL,
        P_GRADE,
        P_USERNAME,
        P_BOOK,
        P_TEXT
      );
      COMMIT;
    END IF;
  END;

CREATE OR REPLACE PROCEDURE ADD_AUTHOR_TO_BOOK(
  P_BOOK_ID IN INT,
  P_AUTHOR_ID IN INT
)
AS AUTHOR_EXISTS INT;
   BOOK_EXISTS INT;
   IS_BOOK_ALREADY_ASSIGNED INT;
BEGIN
  SELECT COUNT(*) INTO AUTHOR_EXISTS FROM AUTHORS A WHERE A.ID = P_AUTHOR_ID;
  SELECT COUNT(*) INTO BOOK_EXISTS FROM BOOKS B WHERE B.ID = P_BOOK_ID;
  SELECT COUNT(*) INTO IS_BOOK_ALREADY_ASSIGNED FROM AUTHORSBOOKS AB
  WHERE AB.BOOK_ID = P_BOOK_ID AND AB.AUTHOR_ID = P_AUTHOR_ID;
  
   IF AUTHOR_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Author ID does not exist.');
   ELSIF BOOK_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Book ID does not exist.');
  ELSIF IS_BOOK_ALREADY_ASSIGNED > 0 THEN
  
      DBMS_OUTPUT.PUT_LINE('This author (' || P_AUTHOR_ID || ') is already assigned to this book(' || P_BOOK_ID || ').');
   ELSE 
      INSERT INTO AUTHORSBOOKS VALUES (P_AUTHOR_ID, P_BOOK_ID);
      COMMIT;
   END IF;
END;

CREATE OR REPLACE PROCEDURE REMOVE_AUTHOR_FROM_BOOK (
  P_BOOK_ID IN INT,
  P_AUTHOR_ID IN INT
)
AS AUTHOR_EXISTS INT;
   BOOK_EXISTS INT;
   IS_BOOK_ALREADY_ASSIGNED INT;
  BEGIN
    SELECT COUNT(*) INTO AUTHOR_EXISTS FROM AUTHORS A WHERE A.ID = P_AUTHOR_ID;
    SELECT COUNT(*) INTO BOOK_EXISTS FROM BOOKS B WHERE B.ID = P_BOOK_ID;
    SELECT COUNT(*) INTO IS_BOOK_ALREADY_ASSIGNED FROM AUTHORSBOOKS AB
    WHERE AB.BOOK_ID = P_BOOK_ID AND AB.AUTHOR_ID = P_AUTHOR_ID;
    
    IF AUTHOR_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Author ID does not exist.');
    ELSIF BOOK_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Book ID does not exist.');
    ELSIF IS_BOOK_ALREADY_ASSIGNED = 0 THEN
      DBMS_OUTPUT.PUT_LINE('This author (' || P_AUTHOR_ID || ') is not assigned to this book(' || P_BOOK_ID || ').');
    ELSE 
      DELETE FROM AUTHORSBOOKS AB 
      WHERE AB.AUTHOR_ID = P_AUTHOR_ID
      AND AB.BOOK_ID = P_BOOK_ID;
      COMMIT;
    END IF;
  END;
  
CREATE OR REPLACE PROCEDURE ADD_BOOK_TO_ORDER(
  P_BOOK_ID IN INT,
  P_ORDER_ID IN INT
)
AS ORDER_EXISTS INT;
   BOOK_EXISTS INT;
   IS_BOOK_ALREADY_ADDED INT;
   CURRENT_USERNAME NVARCHAR2(100);
   IS_ORDER_OF_THIS_CLIENT INT;
   QUANTITY INT;
BEGIN
  CURRENT_USERNAME := USER;
  SELECT COUNT(*) INTO ORDER_EXISTS FROM V_ORDERS_WITH_BOOKS A WHERE A.ID = P_ORDER_ID;
  SELECT COUNT(*) INTO BOOK_EXISTS FROM BOOKS B WHERE B.ID = P_BOOK_ID;
  SELECT QUANTITY_ON_STOCK INTO QUANTITY FROM BOOKS B WHERE B.ID = P_BOOK_ID;
  SELECT COUNT(*) INTO IS_BOOK_ALREADY_ADDED FROM ORDERSBOOKS AB
  WHERE AB.BOOK_ID = P_BOOK_ID AND AB.ORDER_ID = P_ORDER_ID;
  
   IF ORDER_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Order ID does not exist.');
   ELSIF BOOK_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Book ID does not exist.');
   ELSIF IS_BOOK_ALREADY_ADDED > 0 THEN
      DBMS_OUTPUT.PUT_LINE('This book (' || P_BOOK_ID || ') is already added to this order (' || P_ORDER_ID || ').');
   ELSIF QUANTITY = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Quantity equal to zero.');
   ELSE 
      SELECT COUNT(*) INTO IS_ORDER_OF_THIS_CLIENT
      FROM ORDERS O
      WHERE UPPER(O.CLIENT) = SUBSTR(CURRENT_USERNAME, 4) AND O.ID = P_ORDER_ID;
      IF IS_ORDER_OF_THIS_CLIENT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('this order is not urs.');
      ELSE
        INSERT INTO ORDERSBOOKS VALUES (P_BOOK_ID, P_ORDER_ID);
        COMMIT;
      END IF;
   END IF;
END;

CREATE OR REPLACE PROCEDURE REMOVE_BOOK_FROM_ORDER (
  P_BOOK_ID IN INT,
  P_ORDER_ID IN INT
)
AS ORDER_EXISTS INT;
   BOOK_EXISTS INT;
   IS_BOOK_ALREADY_ADDED INT;
   CURRENT_USERNAME NVARCHAR2(100);
   IS_ORDER_OF_THIS_CLIENT INT;
  BEGIN
    CURRENT_USERNAME := USER;
    SELECT COUNT(*) INTO ORDER_EXISTS FROM ORDERS A WHERE A.ID = P_ORDER_ID;
    SELECT COUNT(*) INTO BOOK_EXISTS FROM BOOKS B WHERE B.ID = P_BOOK_ID;
    SELECT COUNT(*) INTO IS_BOOK_ALREADY_ADDED FROM ORDERSBOOKS AB
    WHERE AB.BOOK_ID = P_BOOK_ID AND AB.ORDER_ID = P_ORDER_ID;
    
    IF ORDER_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Order ID does not exist.');
    ELSIF BOOK_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Book ID does not exist.');
    ELSIF IS_BOOK_ALREADY_ADDED = 0 THEN
      DBMS_OUTPUT.PUT_LINE('This book (' || P_BOOK_ID || ') is not added to this order (' || P_ORDER_ID || ').');
    ELSE 
      SELECT COUNT(*) INTO IS_ORDER_OF_THIS_CLIENT
      FROM ORDERS O
      WHERE UPPER(O.CLIENT) = SUBSTR(CURRENT_USERNAME, 4) AND O.ID = P_ORDER_ID;
      IF IS_ORDER_OF_THIS_CLIENT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('this order is not urs.');
      ELSE
        DELETE FROM ORDERSBOOKS AB 
        WHERE AB.ORDER_ID = P_ORDER_ID
        AND AB.BOOK_ID = P_BOOK_ID;
        COMMIT;
      END IF;
    END IF;
  END;
  
CREATE OR REPLACE PROCEDURE GET_ALL_AUTHORS_INFO AS
BEGIN
  FOR AUTHOR_REC IN (SELECT * FROM AUTHORS WHERE AUTHORS.AVAILABILITY = 1) LOOP
    DBMS_OUTPUT.PUT_LINE('Author ID: ' || AUTHOR_REC.ID || 
                         ', Name: ' || AUTHOR_REC.SURNAME || 
                         ' '|| AUTHOR_REC.NAME ||
                         ', Birth Date:' || TO_DATE(AUTHOR_REC.BIRTH_DATE, 
                                                    'DD/MM/YYYY') ||
                         ', Biography: ' || AUTHOR_REC.BIOGRAPHY
                         );
  END LOOP;
END;

CREATE OR REPLACE PROCEDURE REMOVE_ORDER (P_ORDER_ID IN INT)
AS CURRENT_USERNAME VARCHAR2(100);
   IS_ORDER_FOR_THIS_CLIENT INT;
  BEGIN
    CURRENT_USERNAME := USER;
    SELECT COUNT(*) INTO IS_ORDER_FOR_THIS_CLIENT 
    FROM ORDERS O
    WHERE UPPER(O.CLIENT) = SUBSTR(CURRENT_USERNAME, 4) 
    AND   O.ID = P_ORDER_ID;
    
    IF IS_ORDER_FOR_THIS_CLIENT = 0 THEN
      DBMS_OUTPUT.PUT_LINE('This order is not yours.');
    ELSE 
      UPDATE ORDERS O SET O.STATUS = 'cancelled' WHERE O.ID = P_ORDER_ID;
      COMMIT;
    END IF;
  END;

CREATE OR REPLACE PROCEDURE GET_ALL_BOOKS_INFO AS
BEGIN
    FOR BOOK_REC IN (SELECT * FROM V_BOOKS_WITH_AUTHORS) LOOP
    DBMS_OUTPUT.PUT_LINE('Book ID: ' || BOOK_REC.ID || 
                         ', Name: ' || BOOK_REC.BOOK_NAME ||
                         ', Description:' || BOOK_REC.DESCRIPTION ||
                         ', Quantity On Stock: ' || BOOK_REC.QUANTITY_ON_STOCK ||
                         ', Cost: ' || BOOK_REC.COST || '$' ||
                         ', Authors: ' || BOOK_REC.AUTHORS ||
                         ', Grade: ' || BOOK_REC.GRADE
                         );
  END LOOP;
END;

CREATE OR REPLACE PROCEDURE GET_BOOKS_BY_NAME (p_BOOK_NAME IN NVARCHAR2) AS
BEGIN
    FOR BOOK_REC IN (SELECT * FROM V_BOOKS_WITH_AUTHORS B WHERE b.BOOK_NAME LIKE '%' || p_BOOK_NAME || '%') LOOP
    DBMS_OUTPUT.PUT_LINE('Book ID: ' || BOOK_REC.ID || 
                         ', Name: ' || BOOK_REC.BOOK_NAME ||
                         ', Description:' || BOOK_REC.DESCRIPTION ||
                         ', Quantity On Stock: ' || BOOK_REC.QUANTITY_ON_STOCK ||
                         ', Cost: ' || BOOK_REC.COST || '$' ||
                         ', Authors: ' || BOOK_REC.AUTHORS ||
                         ', Grade: ' || BOOK_REC.GRADE
                         );
  END LOOP;
END;

CREATE OR REPLACE PROCEDURE GET_BOOKS_BY_GENRE (p_BOOK_GENRE IN NVARCHAR2) AS
BEGIN
    FOR BOOK_REC IN (SELECT * FROM V_BOOKS_WITH_AUTHORS B WHERE b.GENRE LIKE '%' || p_BOOK_GENRE || '%') LOOP
    DBMS_OUTPUT.PUT_LINE('Book ID: ' || BOOK_REC.ID || 
                         ', Name: ' || BOOK_REC.BOOK_NAME ||
                         ', Description:' || BOOK_REC.DESCRIPTION ||
                         ', Quantity On Stock: ' || BOOK_REC.QUANTITY_ON_STOCK ||
                         ', Cost: ' || BOOK_REC.COST || '$' ||
                         ', Authors: ' || BOOK_REC.AUTHORS ||
                         ', Grade: ' || BOOK_REC.GRADE
                         );
  END LOOP;
END;

CREATE OR REPLACE PROCEDURE GET_BOOKS_BY_COST_RANGE (
  MIN_VALUE IN NUMBER,
  MAX_VALUE IN NUMBER
)
AS NEW_MAX_VALUE NUMBER;
   NEW_MIN_VALUE NUMBER;
BEGIN
    IF MIN_VALUE > MAX_VALUE THEN 
      NEW_MAX_VALUE := MIN_VALUE;
      NEW_MIN_VALUE := MAX_VALUE;
    ELSE 
      NEW_MAX_VALUE := MAX_VALUE;
      NEW_MIN_VALUE := MIN_VALUE;
    END IF;
    FOR BOOK_REC IN (SELECT * FROM V_BOOKS_WITH_AUTHORS B WHERE b.COST BETWEEN NEW_MIN_VALUE AND NEW_MAX_VALUE) LOOP
    DBMS_OUTPUT.PUT_LINE('Book ID: ' || BOOK_REC.ID || 
                         ', Name: ' || BOOK_REC.BOOK_NAME ||
                         ', Description:' || BOOK_REC.DESCRIPTION ||
                         ', Quantity On Stock: ' || BOOK_REC.QUANTITY_ON_STOCK ||
                         ', Cost: ' || BOOK_REC.COST || '$' ||
                         ', Authors: ' || BOOK_REC.AUTHORS ||
                         ', Grade: ' || BOOK_REC.GRADE
                         );
  END LOOP;
END;
  
CREATE OR REPLACE PROCEDURE GET_BOOKS_BY_GRADE (MIN_GRADE IN NUMBER)
AS
  BEGIN
    IF MIN_GRADE > 5 THEN
      DBMS_OUTPUT.PUT_LINE('Grade can not be more than 5');
    ELSE
      FOR BOOK_REC IN (SELECT * FROM V_BOOKS_WITH_AUTHORS B WHERE b.GRADE > MIN_GRADE) LOOP
      DBMS_OUTPUT.PUT_LINE('Book ID: ' || BOOK_REC.ID || 
                           ', Name: ' || BOOK_REC.BOOK_NAME ||
                           ', Description:' || BOOK_REC.DESCRIPTION ||
                           ', Quantity On Stock: ' || BOOK_REC.QUANTITY_ON_STOCK ||
                           ', Cost: ' || BOOK_REC.COST || '$' ||
                           ', Authors: ' || BOOK_REC.AUTHORS ||
                           ', Grade: ' || BOOK_REC.GRADE
                           );
      END LOOP;
    END IF;
  END;
  
CREATE OR REPLACE PROCEDURE GET_BOOKS_BY_AUTHOR (P_AUTHOR IN INT)
AS AUTHOR_EXISTS INT;
  BEGIN
    SELECT COUNT(*) INTO AUTHOR_EXISTS FROM AUTHORS A WHERE A.ID = P_AUTHOR;
    IF AUTHOR_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('No such author');
    ELSE
      FOR BOOK_REC IN (SELECT * FROM BOOKS B INNER JOIN AUTHORSBOOKS AB ON B.ID = AB.BOOK_ID WHERE AB.AUTHOR_ID = P_AUTHOR) LOOP
      DBMS_OUTPUT.PUT_LINE('Book ID: ' || BOOK_REC.ID || 
                           ', Name: ' || BOOK_REC.NAME ||
                           ', Description:' || BOOK_REC.DESCRIPTION ||
                           ', Quantity On Stock: ' || BOOK_REC.QUANTITY_ON_STOCK ||
                           ', Cost: ' || BOOK_REC.COST || '$' ||
                           ', Grade: ' || BOOK_REC.GRADE
                           );
      END LOOP;
    END IF;
  END;
  

CREATE OR REPLACE PROCEDURE DELETE_AUTHOR(AUTHOR_ID IN INT)
AS 
  BEGIN
    UPDATE AUTHORS A SET A.AVAILABILITY = 0 WHERE A.ID = AUTHOR_ID;
    commit;
  END;
  
CREATE OR REPLACE PROCEDURE BAN_USER(P_USERNAME IN NVARCHAR2)
AS
  V_SQL_STMT VARCHAR2(1000);
  USER_EXISTS INT;
  BEGIN 
  SELECT COUNT(*) INTO USER_EXISTS FROM CLIENTS WHERE USERNAME = P_USERNAME;
    IF USER_EXISTS > 0 THEN 
      V_SQL_STMT := 'REVOKE CLIENT_ROLE FROM C##' || P_USERNAME;
      EXECUTE IMMEDIATE V_SQL_STMT;
      UPDATE CLIENTS C SET C.IS_BANNED = 1 
      WHERE C.USERNAME = P_USERNAME;
      COMMIT;
    ELSE
       DBMS_OUTPUT.PUT_LINE('no such user in system');
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
  END;

CREATE OR REPLACE PROCEDURE DELETE_REVIEW(P_ID IN INT)
AS
  REVIEW_EXISTS INT;
  BEGIN
    SELECT COUNT(*) INTO REVIEW_EXISTS FROM REVIEWS R WHERE R.ID = P_ID;
    IF REVIEW_EXISTS > 0 THEN
      DELETE FROM REVIEWS R WHERE R.ID = P_ID;
      COMMIT;
    ELSE
      DBMS_OUTPUT.PUT_LINE('No such review');
    END IF;
  END;
  
CREATE OR REPLACE PROCEDURE DELETE_BOOK (P_ID IN INT)
AS
  BOOK_EXISTS INT;
  BEGIN
    SELECT COUNT(*) INTO BOOK_EXISTS FROM BOOKS B WHERE B.ID = P_ID;
    IF BOOK_EXISTS > 0 THEN
      UPDATE BOOKS SET AVAILABILITY = 0 WHERE ID = P_ID;
      COMMIT;
    ELSE
      DBMS_OUTPUT.PUT_LINE('No such book');
    END IF;
  END;
  
CREATE OR REPLACE PROCEDURE DISMISS_MANAGER (P_USERNAME IN NVARCHAR2)
AS MANAGER_EXISTS INT;
  BEGIN
    SELECT COUNT(*) INTO MANAGER_EXISTS 
    FROM MANAGERS M
    WHERE M.USERNAME = P_USERNAME;
    
    IF MANAGER_EXISTS > 0 THEN
      UPDATE MANAGERS M SET M.WORKING_NOW = 0
      WHERE M.USERNAME = P_USERNAME;
      COMMIT;
    ELSE
      DBMS_OUTPUT.PUT_LINE('No such manager in system.');
    END IF;
  END;
  
CREATE OR REPLACE PROCEDURE GET_WORKING_MANAGERS
AS
  BEGIN
    FOR MANAGER_REC IN (SELECT * FROM MANAGERS WHERE WORKING_NOW = 1) LOOP
      DBMS_OUTPUT.PUT_LINE('Username: ' || MANAGER_REC.USERNAME ||
                           ', Name: ' || MANAGER_REC.SURNAME || ' ' || MANAGER_REC.NAME ||
                           ', Birth Date:' || MANAGER_REC.BIRTH_DATE ||
                           ', Salary: ' || MANAGER_REC.SALARY || '$');
    END LOOP;
  END;
  

  
CREATE OR REPLACE PROCEDURE GET_ALL_CLIENTS_INFO
AS
  BEGIN
    FOR CLIENT_REC IN (SELECT * FROM CLIENTS WHERE IS_BANNED = 0) LOOP
      DBMS_OUTPUT.PUT_LINE('Username: ' || CLIENT_REC.USERNAME ||
                           ', Name: ' || CLIENT_REC.SURNAME || ' ' || CLIENT_REC.NAME ||
                           ', Email:' || CLIENT_REC.EMAIL ||
                           ', Address: ' || CLIENT_REC.ADDRESS);
    END LOOP;
  END;
  
CREATE OR REPLACE PROCEDURE CHECK_CLIENTS_ORDERS (p_username nvarchar2)
AS CURRENT_USERNAME VARCHAR2(100);
  BEGIN
    CURRENT_USERNAME := USER;
    IF UPPER(P_USERNAME) != SUBSTR(CURRENT_USERNAME, 4) THEN
      DBMS_OUTPUT.PUT_LINE('not ur order.');
    ELSE
      FOR ORDER_REC IN (SELECT * FROM V_ORDERS_WITH_BOOKS WHERE CLIENT = P_USERNAME AND STATUS != 'cancelled') LOOP
      DBMS_OUTPUT.PUT_LINE('Order ID: ' || ORDER_REC.ID ||
                           ', Cost: ' || ORDER_REC.COST ||
                           ', Status: ' || ORDER_REC.STATUS ||
                           ', Shipping way: ' || ORDER_REC.SHIPPING_WAY ||
                           ', Books: ' || ORDER_REC.BOOKS);
      END LOOP;
    END IF;
  END;
  
CREATE OR REPLACE PROCEDURE ADD_ORDER (P_USERNAME IN NVARCHAR2, P_SHIPPING_WAY IN NVARCHAR2, p_manager nvarchar2)
AS CURRENT_USERNAME VARCHAR2(100);
   MANAGER_EXISTS INT;
  BEGIN
    CURRENT_USERNAME := USER;
    
    SELECT COUNT(*) INTO MANAGER_EXISTS 
    FROM MANAGERS
    WHERE USERNAME = p_manager;
    
    IF SUBSTR(CURRENT_USERNAME, 4) != UPPER(P_USERNAME) THEN
      DBMS_OUTPUT.PUT_LINE('Cannot add order to other client.');
    ELSIF MANAGER_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('No suchmanager in system.');
    ELSE
      INSERT INTO ORDERS VALUES (
                  ORDERS_INDEX_SEQ.NEXTVAL,
                  P_USERNAME,
                  0,
                  'in delivery',
                  p_manager,
                  P_SHIPPING_WAY,
                  TRUNC(SYSDATE)
                  );
      COMMIT;
    END IF;
  END;

CREATE OR REPLACE PROCEDURE CHECK_BOOK_APPLICATIONS (P_PUBLISHER IN NVARCHAR2) 
AS
BEGIN  
  FOR BOOK_REC IN (SELECT B.NAME, COUNT(BIW.BOOK_ID) AS APPLICATION_COUNT
                   FROM BOOKS_IN_WAIT BIW 
                   INNER JOIN BOOKS B ON B.ID = BIW.BOOK_ID
                   WHERE B.PUBLISHER = P_PUBLISHER
                   GROUP BY B.NAME) LOOP
    DBMS_OUTPUT.PUT_LINE('Name: ' || BOOK_REC.NAME || 
    ', Application Count: ' || BOOK_REC.APPLICATION_COUNT);
  END LOOP;
END;
  
CREATE OR REPLACE PROCEDURE ADD_APPLICATION_FOR_BOOK (
    P_BOOK_ID IN INT,
    P_USERNAME IN NVARCHAR2
)
AS CURRENT_USERNAME VARCHAR2(100);
   BOOK_EXISTS INT;
  BEGIN
    SELECT COUNT(*) INTO BOOK_EXISTS FROM BOOKS B
    WHERE B.ID = P_BOOK_ID;
    
    IF BOOK_EXISTS > 0 THEN
      CURRENT_USERNAME := USER;
      IF SUBSTR(CURRENT_USERNAME, 4) != UPPER(P_USERNAME) THEN
        DBMS_OUTPUT.PUT_LINE('Cannot add applcation for other user.');
      ELSE 
        INSERT INTO BOOKS_IN_WAIT VALUES (P_BOOK_ID, P_USERNAME);
        commit;
      END IF;
    ELSE 
      DBMS_OUTPUT.PUT_LINE('There is no such book.');
    END IF;
  END;
  
CREATE OR REPLACE PROCEDURE ADD_BOOK_TO_BASKET (
  P_BOOK_ID IN INT,
  P_USERNAME IN NVARCHAR2
)
AS BOOK_EXISTS INT;
   IS_BOOK_ALREADY_IN_BASKET INT;
   CURRENT_USERNAME NVARCHAR2(100);
BEGIN
  CURRENT_USERNAME := USER;
  SELECT COUNT(*) INTO BOOK_EXISTS FROM V_BOOKS_WITH_AUTHORS B WHERE B.ID = P_BOOK_ID;
  SELECT COUNT(*) INTO IS_BOOK_ALREADY_IN_BASKET FROM BOOKS_IN_BASKET BIB
  WHERE BIB.BOOK_ID = P_BOOK_ID AND BIB.CLIENT = P_USERNAME;
  
  IF BOOK_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Book ID does not exist.');
  ELSIF IS_BOOK_ALREADY_IN_BASKET > 0 THEN
      DBMS_OUTPUT.PUT_LINE('This book (' || P_BOOK_ID || ') is already in your basket.');
  ELSIF SUBSTR(CURRENT_USERNAME, 4) != UPPER(P_USERNAME) THEN
        DBMS_OUTPUT.PUT_LINE('Cannot add applcation for other user.');
   ELSE 
      INSERT INTO BOOKS_IN_BASKET VALUES (P_BOOK_ID, P_USERNAME);
      COMMIT;
   END IF;
END;

CREATE OR REPLACE PROCEDURE REMOVE_BOOK_FROM_BASKET (
  P_BOOK_ID IN INT,
  P_USERNAME IN NVARCHAR2
)
AS BOOK_EXISTS INT;
   IS_BOOK_ALREADY_IN_BASKET INT;
   CURRENT_USERNAME NVARCHAR2(100);
  BEGIN
    CURRENT_USERNAME := USER;
    SELECT COUNT(*) INTO BOOK_EXISTS FROM BOOKS B WHERE B.ID = P_BOOK_ID;
    SELECT COUNT(*) INTO IS_BOOK_ALREADY_IN_BASKET FROM BOOKS_IN_BASKET BIB
    WHERE BIB.BOOK_ID = P_BOOK_ID AND BIB.CLIENT = P_USERNAME;
    
    IF UPPER(P_USERNAME) != substr(CURRENT_USERNAME, 4) THEN
      DBMS_OUTPUT.PUT_LINE('not ur basket.');
    ELSIF BOOK_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Book ID does not exist.');
    ELSIF IS_BOOK_ALREADY_IN_BASKET = 0 THEN
      DBMS_OUTPUT.PUT_LINE('This book is not in ur basket.');
    ELSE 
      DELETE FROM BOOKS_IN_BASKET BIB
      WHERE BIB.CLIENT = p_username
      AND BIB.BOOK_ID = P_BOOK_ID;
      COMMIT;
    END IF;
  END;
  
CREATE OR REPLACE PROCEDURE UPDATE_MANAGER_SALARY (
    P_USERNAME IN NVARCHAR2,
    P_NEW_SALARY IN NVARCHAR2)
AS MANAGER_EXISTS INT;
  BEGIN
    SELECT COUNT(*) INTO MANAGER_EXISTS FROM MANAGERS WHERE MANAGERS.USERNAME = P_USERNAME;
    
    IF MANAGER_EXISTS = 0 THEN
      DBMS_OUTPUT.PUT_LINE('No such manager in system.');
    ELSIF P_NEW_SALARY < 0 THEN
      DBMS_OUTPUT.PUT_LINE('Salary can not be less than zero.');
    ELSE 
      UPDATE MANAGERS M SET M.SALARY = P_NEW_SALARY
      WHERE M.USERNAME = P_USERNAME;
      COMMIT;
    END IF;
  END;
  
CREATE OR REPLACE PROCEDURE UPDATE_CLIENT_EMAIL (
    P_NEW_EMAIL IN NVARCHAR2)
AS CURRENT_USERNAME NVARCHAR2(100);
  BEGIN
      CURRENT_USERNAME := USER;
    
      UPDATE CLIENTS C SET C.EMAIL = P_NEW_EMAIL
      WHERE C.USERNAME = CURRENT_USERNAME;
      COMMIT;
  END;
  
CREATE OR REPLACE PROCEDURE UPDATE_CLIENT_ADDRESS (
    P_NEW_ADDRESS IN NVARCHAR2)
AS CURRENT_USERNAME NVARCHAR2(100);
  BEGIN
      CURRENT_USERNAME := USER;
    
      UPDATE CLIENTS C SET C.ADDRESS = P_NEW_ADDRESS
      WHERE C.USERNAME = CURRENT_USERNAME;
      COMMIT;
  END;

CREATE OR REPLACE PROCEDURE UPDATE_PUBLISHER_MANAGER (
    P_MANAGER_USERNAME IN NVARCHAR2,
    P_PUBLISHER_NAME IN NVARCHAR2   
)
AS MANAGER_EXISTS INT;
   PUBLISHER_EXISTS INT;
  BEGIN
      SELECT COUNT(*) INTO MANAGER_EXISTS
      FROM MANAGERS M
      WHERE M.USERNAME = P_MANAGER_USERNAME;
      SELECT COUNT(*) INTO PUBLISHER_EXISTS
      FROM PUBLISHERS P
      WHERE P.NAME = P_PUBLISHER_NAME;
      
      IF MANAGER_EXISTS = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No such manager in system.');
      ELSIF PUBLISHER_EXISTS = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No such publisher in system.');
      ELSE 
        UPDATE PUBLISHERS P SET P.MANAGER = P_MANAGER_USERNAME
        WHERE P.NAME = P_PUBLISHER_NAME;
        COMMIT;
      END IF;
  END;
  
CREATE OR REPLACE PROCEDURE UPDATE_AUTHOR_PICTURE (
    P_AUTHOR_ID IN INT,
    P_PICTURE_NAME IN NVARCHAR2
    )
AS AUTHOR_EXISTS INT;
  BEGIN
      SELECT COUNT(*) INTO AUTHOR_EXISTS
      FROM AUTHORS A
      WHERE A.ID = P_AUTHOR_ID;
      
      IF AUTHOR_EXISTS = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No such author in system.');
      ELSE 
        UPDATE AUTHORS A SET A.PICTURE = GET_BLOB_FROM_STRING(P_PICTURE_NAME)
        WHERE A.ID = P_AUTHOR_ID;
        COMMIT;
      END IF;
  END;
  
CREATE OR REPLACE PROCEDURE UPDATE_BOOK_PICTURE (
    P_BOOK_ID IN INT,
    P_PICTURE_NAME IN NVARCHAR2
    )
AS BOOK_EXISTS INT;
  BEGIN
      SELECT COUNT(*) INTO BOOK_EXISTS
      FROM BOOKS A
      WHERE A.ID = P_BOOK_ID;
      
      IF BOOK_EXISTS = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No such book in system.');
      ELSE 
        UPDATE BOOKS A SET A.PICTURE = GET_BLOB_FROM_STRING(P_PICTURE_NAME)
        WHERE A.ID = P_BOOK_ID;
        COMMIT;
      END IF;
  END;
  
CREATE OR REPLACE PROCEDURE UPDATE_BOOK_QUANTITY_ON_STOCK (
    P_BOOK_ID IN INT,
    P_NEW_QUANTITY IN NUMBER
    )
AS BOOK_EXISTS INT;
  BEGIN
      SELECT COUNT(*) INTO BOOK_EXISTS
      FROM BOOKS A
      WHERE A.ID = P_BOOK_ID;
      
      IF BOOK_EXISTS = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No such book in system.');
      ELSIF P_NEW_QUANTITY < 0 THEN
        DBMS_OUTPUT.PUT_LINE('Quantity can not be less then 0.');
      ELSE 
        UPDATE BOOKS A SET A.QUANTITY_ON_STOCK = P_NEW_QUANTITY
        WHERE A.ID = P_BOOK_ID;
        COMMIT;
      END IF;
  END;
  

CREATE OR REPLACE PROCEDURE UPDATE_BOOK_COST (
    P_BOOK_ID IN INT,
    P_NEW_COST IN NUMBER
    )
AS BOOK_EXISTS INT;
  BEGIN
      SELECT COUNT(*) INTO BOOK_EXISTS
      FROM BOOKS A
      WHERE A.ID = P_BOOK_ID;
      
      IF BOOK_EXISTS = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No such book in system.');
      ELSIF P_NEW_COST < 0 THEN
        DBMS_OUTPUT.PUT_LINE('Cost can not be less then 0.');
      ELSE 
        UPDATE BOOKS A SET A.COST = P_NEW_COST
        WHERE A.ID = P_BOOK_ID;
        COMMIT;
      END IF;
  END;
  
CREATE OR REPLACE PROCEDURE UPDATE_ORDER_STATUS (
    P_ORDER_STATUS IN INT,
    P_ORDER_ID IN INT
    )
AS ORDER_EXISTS INT;
  BEGIN
      SELECT COUNT(*) INTO ORDER_EXISTS
      FROM ORDERS A
      WHERE A.ID = P_ORDER_ID;
      
      IF ORDER_EXISTS = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No such order in system.');
      ELSE 
        UPDATE ORDERS A SET A.STATUS = P_ORDER_STATUS
        WHERE A.ID = P_ORDER_ID;
        COMMIT;
      END IF;
  END;
  
CREATE OR REPLACE PROCEDURE UPDATE_ORDER_MANAGER (
    P_MANAGER_USERNAME IN INT,
    P_ORDER_ID IN INT
    )
AS ORDER_EXISTS INT;
   MANAGER_EXISTS INT;
  BEGIN
      SELECT COUNT(*) INTO ORDER_EXISTS
      FROM ORDERS A
      WHERE A.ID = P_ORDER_ID;
      
      SELECT COUNT(*) INTO MANAGER_EXISTS
      FROM MANAGERS A
      WHERE A.USERNAME = P_MANAGER_USERNAME;
      
      IF ORDER_EXISTS = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No such order in system.');
      ELSIF MANAGER_EXISTS = 0 THEN 
        DBMS_OUTPUT.PUT_LINE('No such manager in system.');
      ELSE 
        UPDATE ORDERS A SET A.MANAGER = P_MANAGER_USERNAME
        WHERE A.ID = P_ORDER_ID;
        COMMIT;
      END IF;
  END;
  
CREATE OR REPLACE PROCEDURE GENERATE_ORDERS_XML IS
  l_xml CLOB;
  l_file UTL_FILE.FILE_TYPE;
BEGIN
  l_xml := DBMS_XMLGEN.getXML('SELECT * FROM V_ORDERS_WITH_BOOKS');
  
  l_file := UTL_FILE.FOPEN('XML_DIR', 'orders.xml', 'W');
  
  UTL_FILE.PUT_LINE(l_file, l_xml);
  
  UTL_FILE.FCLOSE(L_FILE);
END;

BEGIN
  DBMS_SCHEDULER.CREATE_JOB(
    job_name        => 'GET_ORDERS',
    job_type        => 'PLSQL_BLOCK',
    job_action      => 'BEGIN WRITE_ORDERS_STATS_TO_XML; END;',
    start_date      => SYSTIMESTAMP,
    repeat_interval => 'FREQ=MINUTELY; INTERVAL=1',
    end_date        => NULL,
    enabled         => TRUE,
    comments        => 'Job to generate XML file from V_ORDERS_WITH_BOOKS view'
  );
END;

BEGIN
  DBMS_SCHEDULER.DROP_JOB(
    job_name        => 'GET_ORDERS',
    force           => FALSE
  );
END;

CREATE OR REPLACE PROCEDURE WRITE_ORDERS_STATS_FROM_XML
AS XML_CLOB CLOB;
   xml_file BFILE;
BEGIN
  xml_file := BFILENAME('XML_DIR', 'orders.xml');
  DBMS_LOB.fileopen(xml_file, DBMS_LOB.file_readonly);
  DBMS_LOB.createtemporary(XML_CLOB, TRUE);
  DBMS_LOB.LOADFROMFILE(XML_CLOB, xml_file, DBMS_LOB.lobmaxsize);
  DBMS_LOB.fileclose(xml_file);
      
  DELETE FROM XML_STORAGE;
  INSERT INTO XML_STORAGE VALUES (1, XML_CLOB);

  delete from ex_xml_orders;
INSERT INTO EX_XML_ORDERS (ORDER_DATE, ORDER_ID, COST)
SELECT TO_DATE(XT.ORDER_DATE, 'YYYY-MM-DD HH24:MI:SS'), XT.ORDER_ID, XT.COST
FROM XML_STORAGE,
   XMLTABLE('/orders/order'
       PASSING XMLTYPE(XML_TEXT)
       COLUMNS 
           ORDER_DATE VARCHAR2(50) PATH 'order_date',
           ORDER_ID VARCHAR2(50) PATH 'id',
           COST VARCHAR2(50) PATH 'cost'
   ) XT;
   commit;
END;




select * from EX_XML_ORDERS;
SELECT * FROM XML_STORAGE;

CREATE OR REPLACE PROCEDURE WRITE_ORDERS_STATS_TO_XML
AS L_FILE  UTL_FILE.FILE_TYPE;
   l_data  VARCHAR2(32767);
BEGIN
  l_file := UTL_FILE.FOPEN('XML_DIR', 'orders.xml', 'w', 32767);
  
  SELECT XMLElement("orders",
           XMLAGG(
             XMLELEMENT("order",
               XMLELEMENT("id", ID),
               XMLELEMENT("client", CLIENT),
               XMLELEMENT("cost", COST),
               XMLELEMENT("status", STATUS),
               XMLELEMENT("manager", MANAGER),
               XMLELEMENT("shipping_way", SHIPPING_WAY),
               XMLELEMENT("order_date", ORDER_DATE),
               XMLELEMENT("books", BOOKS)
             )
           )
         ).getClobVal()
  INTO L_DATA
  FROM V_ORDERS_WITH_BOOKS;
  
  UTL_FILE.PUT_LINE(l_file, l_data);
  
  UTL_FILE.FCLOSE(l_file);
EXCEPTION
  WHEN OTHERS THEN
    IF UTL_FILE.IS_OPEN(l_file) THEN
      UTL_FILE.FCLOSE(l_file);
    END IF;
    RAISE;
END;

CREATE OR REPLACE PROCEDURE GET_SALES_STATS 
AS 
BEGIN
  BEGIN
    WRITE_ORDERS_STATS_FROM_XML;
  end;
  FOR ORDER_REC IN (SELECT ORDER_DATE, COUNT(*) AS ORDER_COUNT, SUM(COST) AS COST_SUM FROM EX_XML_ORDERS GROUP BY ORDER_DATE) LOOP
    DBMS_OUTPUT.PUT_LINE('Date: ' || ORDER_REC.ORDER_DATE ||
                          ', Amount of orders: ' || ORDER_REC.ORDER_COUNT ||
                          ', Sum: ' || ORDER_REC.COST_SUM);
  end loop;
END;


CREATE OR REPLACE PROCEDURE GET_REVIEWS_FOR_BOOK (P_BOOK_ID IN INT)
AS BOOK_EXISTS INT;
BEGIN
  SELECT COUNT(*) INTO BOOK_EXISTS FROM BOOKS WHERE ID = P_BOOK_ID;
  IF BOOK_EXISTS = 0 THEN
    DBMS_OUTPUT.PUT_LINE('Book doesnt exist.');
  ELSE
    FOR REVIEW_REC IN (SELECT * FROM REVIEWS WHERE BOOK = P_BOOK_ID) LOOP
        DBMS_OUTPUT.PUT_LINE('Grade: ' || REVIEW_REC.GRADE ||
                             ', Author: ' ||  REVIEW_REC.CLIENT_AUTHOR ||
                             ', Text: ' || REVIEW_REC.TEXT);
    END LOOP;
  END IF;
END;

CREATE OR REPLACE PROCEDURE CHECK_USER_BASKET(
  P_USERNAME IN NVARCHAR2
)
AS CURRENT_USERNAME NVARCHAR2(100);
BEGIN
  CURRENT_USERNAME := USER;
  IF UPPER(P_USERNAME) != SUBSTR(CURRENT_USERNAME, 4) THEN
    DBMS_OUTPUT.PUT_LINE('not ur basket');
  ELSE 
    FOR BOOK_REC IN (SELECT * FROM books_in_basket OB
                    INNER JOIN BOOKS B ON OB.BOOK_ID = B.ID
                     WHERE OB.CLIENT = P_USERNAME) LOOP
      DBMS_OUTPUT.PUT_LINE('Book name: ' || BOOK_REC.NAME);
    END LOOP;
  END IF;
END;
  

--DELETE FROM AUTHORS;
--DELETE FROM PUBLISHERS;
--DELETE FROM CLIENTS;
--DELETE FROM BOOKS;
--DELETE FROM AUTHORSBOOKS;
--delete from managers;
--delete from reviews;




